;; System vars
(defpoll MEM_USAGE :interval "5s" `printf "%.0f" $(free -m | grep Mem | awk '{print ($3/$2)*100}')`)
(defpoll BLIGHT :interval "1s" `brightnessctl g`)
(defpoll BATTERY :interval "5s" `upower -i $(upower -e | head -n 1) | grep percentage | awk '{print $2}' | tr -d '%'`)
(defpoll WIFI_STR :interval "1s" `nmcli -t -f active,signal dev wifi | grep yes | cut -d ":" -f 2`)

;; Time vars
(defpoll TIME :interval "5s" `date +\"%H:%m\"`)
(defpoll DATE :interval "5s" `date +\"%A %M %D\"`)

;; Uptime vars
(defpoll UPHOUR :interval "5s" `uptime -p | awk '{print $2 \" \" $3}' | sed 's/,//g'`)
(defpoll UPMIN :interval "5s" `uptime -p | awk '{print $4 \" \" $5}'`)

;; background
(defwidget bg [] 
	(box :class "bg")
)

; 
;; system
(defwidget system [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(box :orientation "v" :spacing 35 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :class "mem_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconmem" :text " ")
				(scale :min 0 :max 100 :value MEM_USAGE :active "false"))
			(box :class "wifi_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconwifi" :text " ")
				(scale :min 0 :max 100 :value WIFI_STR :active "false"))
			(box :class "bright_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconbright" :text " ")
				(scale :min 0 :max 100 :value BLIGHT :active "false"))
			(box :class "bat_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconbat" :text " ")
				(scale :min 0 :max 100 :value BATTERY :active "false")))))

;; clock
(defwidget clock [] 
	(box :class "genwin" :orientation "h" :spacing 50 :space-evenly false :vexpand "false" :hexpand "false" 
		(box :orientation "h" :spacing 0
			(label :class "time_hour" :valign "start" :wrap "true" :limit-width 25 :text TIME)
			(label :class "time_min" :valign "end" :wrap "true" :limit-width 25 :text DATE))))

;; uptime
(defwidget uptime [] 
	(box :class "genwin" 
		(box :orientation "h" :halign "center" :spacing 40 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(label :class "icontimer" :valign "center" :text "")
			(box :orientation "v" :valign "center" :spacing 0 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "uphour" :halign "start" :wrap "true" :limit-width 25 :text UPHOUR)
				(label :class "upmin" :halign "start" :wrap "true" :limit-width 25 :text UPMIN)
				(button :onclick "/home/sam/.cargo/bin/eww close-all")))))


;; power buttons
(defwidget sleep [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(button :class "btn_sleep" :onclick "systemctl suspend" "")))
(defwidget reboot [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(button :class "btn_reboot" :onclick "systemctl reboot" "")))
(defwidget poweroff [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(button :class "btn_poweroff" :onclick "systemctl poweroff" "")))

;; ** Windows *************************************************************************


;; background
(defwindow background :stacking "fg" :focusable "false" :monitor 0 
	    :geometry (geometry :x 0 :y 0 :width "100%" :height "100%")
					(bg))

;; system
(defwindow system :stacking "fg" :focusable "false" :monitor 0  
	    :geometry (geometry :x 150 :y 605 :width 350 :height 325)
					(system))

;; clock
(defwindow clock :stacking "fg" :focusable "false" :monitor 0 
	    :geometry (geometry :x 515 :y 150 :width 350 :height 155)
					(clock))

;; uptime
(defwindow uptime :stacking "fg" :focusable "false" :monitor 0 
	    :geometry (geometry :x 515 :y 320 :width 350 :height 155)
					(uptime))

;; sleep
(defwindow sleep :stacking "fg" :focusable "false" :monitor 0 
	    :geometry (geometry :x 1615 :y 150 :width 155 :height 155)
					(sleep))

;; reboot
(defwindow reboot :stacking "fg" :focusable "false" :monitor 0 
	    :geometry (geometry :x 1445 :y 320 :width 155 :height 155)
					(reboot))

;; poweroff
(defwindow poweroff :stacking "fg" :focusable "false" :monitor 0 
	    :geometry (geometry :x 1615 :y 320 :width 155 :height 155)
					(poweroff))


;;;; Rofi style powermenu
(defwidget bigpowermenu []
  (box :orientation "h" :space-evenly false :class "bigpowermenu" :halign "center" :valign "center" :spacing 20
    (button :style "color: #d8dee9;" :class "shutdown" :onrightclick "systemctl poweroff" "")
    (button :style "color: #e5e9f0;" :class "reboot" :onrightclick "systemctl reboot" "")
    (button :style "color: #eceff4;" :class "lock" :onrightclick "bsplock" "")
    (button :style "color: #e8e8e8;" :class "suspend" :onrightclick "mpc -q pause & amixer set Master mute & systemctl suspend" "")
		))


; (defwidget network []

;   (box :orientation "v" :space-evenly false :class "network" :halign "center" :valign "center" :hexpand true :vexpand true  
;     (label :class "label-control" :text "${ssid}" :halign "center" :limit-width 50 :show-truncated true :hexpand true :vexpand true)
;     (box :orientation "h" :space-evenly false :class "controls" :halign "center" :valign "center" :spacing 20
;          (button :style "color: #d8dee9;" :onclick "sh ~/.config/eww/scripts/airplane_mode.sh" "")
;          (button :style "color: #e5e9f0;" :onclick "alacritty --class 'alacritty-float,alacritty-float' -e bmon &" "")
;          (button :style "color: #eceff4;" :onclick "alacritty --class 'alacritty-float,alacritty-float' -e nmtui &" "")
;          (button :style "color: #e8e8e8;" :onclick "nm-connection-editor &" ""))))

(defwidget screenshot []

  (box :orientation "v" :space-evenly false :class "network" :halign "center" :valign "center" :hexpand true :vexpand true  
    (label :class "label-control" :text "  Screenshot" :halign "center" :limit-width 50 :show-truncated true :hexpand true :vexpand true)
    (box :orientation "h" :space-evenly false :class "controls" :halign "center" :valign "center" :spacing 20
         (button :style "color: #d8dee9;" :onclick "eww close screenshot && ~/.config/eww/scripts/screenshot 'SCREEN'"  "")
         (button :style "color: #e5e9f0;" :onclick "eww close screenshot && ~/.config/eww/scripts/screenshot 'SELECT'" ""))))


;;;; Fetch widget window

(defwindow fetch
  :wm-ignore: true
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "20px"
                      :y "65px"
                      :width "170px"
                      :height "200px"
                      :anchor "top left")
(uinfo))

;;;; Quicksettings window

(defwindow quicksettings
  :wm-ignore true
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "20px"
                      :y "275px"
                      :width "170px"
                      :height "50px"
                      :anchor "top left")
(quicksettings))

;;;; Favorite applications

(defwindow appbar
  :wm-ignore true
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "20"
                      :y "335px"
                      :width "170px"
                      :height "70px"
                      :anchor "top left")
(appbar))

;;;; Big Calendar Window

(defwindow calendar
  :wm-ignore: true
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "20px"
                      :y "415px"
                      :width "240px"
                      :height "160px"
                      :anchor "top left")
(cal))


;;;; Small date Window

(defwindow smalldate
  :wm-ignore: true
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "270px"
                      :y "580px"
                      :width "100px"
                      :height "39px"
                      :anchor "top left")
(smalldate))



(defwindow bigpowermenu
  :wm-ignore true
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0px"
                      :y "0%"
                      :width "20%"
                      :height "10%"
                      :anchor "center center")
(bigpowermenu))


(defwindow network
  :wm-ignore true
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0px"
                      :y "0%"
                      :width "20%"
                      :height "10%"
                      :anchor "center center")
(network))

(defwindow screenshot
  :wm-ignore true
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0px"
                      :y "0%"
                      :width "20%"
                      :height "10%"
                      :anchor "center center")
(screenshot))

(defwindow close
  :wm-ignore true
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0px"
                      :y "0%"
                      :width "20%"
                      :height "10%"
                      :anchor "center center")
(screenshot))
